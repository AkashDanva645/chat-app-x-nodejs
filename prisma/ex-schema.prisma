generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String     @unique
  username          String     @unique
  phoneNumber       String     @unique @map("phone_number")
  firstname         String?
  lastname          String?
  alias             String
  password          String
  bio               String?     
  profilePicUrl     String?    @unique @map("profile_pic_url")
  createdAt         DateTime   @map("created_at")
  updatedAt         DateTime?  @map("updated_at")
  isDeleted         Boolean    @default(false) @map("is_deleted")
  deletedAt         DateTime?      @map("deleted_at")
  messages          Message[]
  contacts          Contact[]     @relation("hasContact")
  contactBy         Contact[]     @relation("isContact")
  groups            UserGroup[]   @relation("isParticipant")
  @@map("users")
}


model Contact {
  id                String      @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  personId          String      @map("person_id") //@db.Uuid
  person            User        @relation("isContact", fields: [personId], references: [id], onDelete: Cascade)        
  ownerId           String      @map("owner_id") //@db.Uuid
  owner             User        @relation("hasContact", fields: [ownerId], references: [id], onDelete: Cascade)
  chatRoomId        String?     @map("chat_room_id") //@db.Uuid
  chatRoom          ChatRoom?   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @map("created_at")
  updatedAt         DateTime?  @map("updated_at")
  isDeleted         Boolean    @default(false) @map("is_deleted")
  deletedAt         DateTime?      @map("deleted_at")
  @@unique([personId, ownerId])
  @@map("contacts")
}

enum ChatRoomType {
  DUAL
  GROUP
  @@map("chat_room_type")
}

model Group {
  id                  String             @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatRoomId          String?             @unique @map("chat_room_id") //@db.Uuid
  name                String  
  profilePicUrl       String         @unique @map("profile_pic_url")
  users               UserGroup[]    @relation("hasParticipant")
  chatRoom            ChatRoom?       @relation(fields: [chatRoomId], references: [id], onDelete: SetNull)
  createdAt           DateTime       @map("created_at")
  updatedAt           DateTime?      @map("updated_at")
  isDeleted           Boolean        @default(false) @map("is_deleted")
  @@map("groups")
}

enum RoleType {
  ADMIN
  PARTICIPANT
  @@map("role_in_group")
}

model UserGroup {
  id                  String          @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String          @map("user_id") //@db.Uuid
  user                User            @relation("isParticipant", fields: [userId], references: [id], onDelete: Cascade)   
  groupId             String          @map("group_id") //@db.Uuid
  group               Group           @relation("hasParticipant", fields: [groupId], references: [id], onDelete: Cascade)
  role                RoleType        @map("role")
  createdAt           DateTime        @map("created_at")
  updatedAt           DateTime?       @map("updated_at")
  isDeleted           Boolean         @default(false) @map("is_deleted")
  @@map("user_group")
}

model ChatRoom {
  id                  String          @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatRoomType                        ChatRoomType @map("chat_room_type")
  createdAt           DateTime        @map("created_at")
  updatedAt           DateTime?       @map("updated_at")
  isDeleted           Boolean         @default(false) @map("is_deleted")
  messages            Message[]
  contacts            Contact[] 
  group               Group?
  @@map("chat_rooms")
}

model Message {
  id                  String          @id //@default(dbgenerated("gen_random_uuid()")) @db.Uuid
  textContent         String          @map("text_content")
  authorId            String?         @map("authour_id") //@db.Uuid
  chatRoomId          String?         @map("chat_room_id") //@db.Uuid
  sent                Boolean         @default(false)
  received            Boolean         @default(false)
  read                Boolean         @default(false)
  createdAt           DateTime        @map("created_at")
  updatedAt           DateTime?       @map("updated_at")
  isDeleted           Boolean         @default(false) @map("is_deleted")
  author              User?           @relation(fields: [authorId], references: [id])
  chatRoom            ChatRoom?       @relation(fields: [chatRoomId], references: [id])
  @@map("messages")
}
